// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sqsUtdEY9EziH5JCt3D7uY
// Component: KyRWDtnvsi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { GraphCMSField } from "@plasmicpkgs/plasmic-graphcms"; // plasmic-import: _3Kx5FMtA8n/codeComponent

import { useScreenVariants as useScreenVariantsqo0Z9EiWgEmol } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Qo0Z9eiWgEMOL/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: sqsUtdEY9EziH5JCt3D7uY/projectcss
import sty from "./PlasmicPageTemplate.module.css"; // plasmic-import: KyRWDtnvsi/css

export type PlasmicPageTemplate__VariantMembers = {
  template: "template1" | "template2";
};

export type PlasmicPageTemplate__VariantsArgs = {
  template?: SingleChoiceArg<"template1" | "template2">;
};

type VariantPropType = keyof PlasmicPageTemplate__VariantsArgs;
export const PlasmicPageTemplate__VariantProps = new Array<VariantPropType>(
  "template"
);

export type PlasmicPageTemplate__ArgsType = {};
type ArgPropType = keyof PlasmicPageTemplate__ArgsType;
export const PlasmicPageTemplate__ArgProps = new Array<ArgPropType>();

export type PlasmicPageTemplate__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"header">;
  img?: p.Flex<typeof p.PlasmicImg>;
  contentWrapper?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  title?: p.Flex<"h1">;
  span?: p.Flex<"span">;
  date?: p.Flex<"h4">;
  content?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  detailsPengantin?: p.Flex<"div">;
  title2?: p.Flex<"h5">;
  title4?: p.Flex<"h5">;
  title8?: p.Flex<"h5">;
  title5?: p.Flex<"p">;
  title3?: p.Flex<"h5">;
  title6?: p.Flex<"h5">;
  title9?: p.Flex<"h5">;
  title7?: p.Flex<"p">;
  row?: p.Flex<"div">;
  date2?: p.Flex<"div">;
  pukul?: p.Flex<"div">;
  alamat?: p.Flex<"div">;
  outro?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
};

export interface DefaultPageTemplateProps {
  template?: SingleChoiceArg<"template1" | "template2">;
  className?: string;
}

function PlasmicPageTemplate__RenderFunc(props: {
  variants: PlasmicPageTemplate__VariantsArgs;
  args: PlasmicPageTemplate__ArgsType;
  overrides: PlasmicPageTemplate__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqo0Z9EiWgEmol()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      {true ? (
        <header
          data-plasmic-name={"hero"}
          data-plasmic-override={overrides.hero}
          className={classNames(projectcss.all, sty.hero)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__y7Gom)}>
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("100%" as const)
                  : ("auto" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={(() => {
                try {
                  return $ctx.graphCmsItem.coverPhoto;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"contentWrapper"}
            data-plasmic-override={overrides.contentWrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.contentWrapper)}
          >
            <h4
              data-plasmic-name={"h4"}
              data-plasmic-override={overrides.h4}
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4
              )}
            >
              {"Undangan Pernikahan"}
            </h4>

            <h1
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, projectcss.h1, sty.title)}
            >
              <GraphCMSField
                className={classNames(
                  "__wab_instance",
                  sty.graphCmsField__hmUpX
                )}
                path={["title"]}
              />
            </h1>

            <span
              data-plasmic-name={"span"}
              data-plasmic-override={overrides.span}
              className={classNames(
                projectcss.all,
                projectcss.span,
                projectcss.__wab_text,
                sty.span
              )}
            >
              {
                "WE INVITE YOU TO CELEBRATE\nWITH US THE MOST SPECIAL DAY IN OUR LIFES"
              }
            </span>

            <h4
              data-plasmic-name={"date"}
              data-plasmic-override={overrides.date}
              className={classNames(projectcss.all, projectcss.h4, sty.date)}
            >
              <GraphCMSField
                className={classNames(
                  "__wab_instance",
                  sty.graphCmsField__nkUp4
                )}
                path={["evenDateTime"]}
              />
            </h4>
          </p.Stack>
        </header>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        hasGap={true}
        className={classNames(projectcss.all, sty.content, {
          [sty.contenttemplate_template2]: hasVariant(
            variants,
            "template",
            "template2"
          )
        })}
      >
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1
          )}
        >
          {"Om Swastiastu"}
        </h1>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dLqUz
          )}
        >
          {
            "Atas Asung Kertha Wara Nugraha Ida Sang Hyang Widhi Wasa/Tuhan Yang Maha Esa kami bermaksud mengundang Bapak/Ibu/Saudara/i pada Upacara Manusa Yadnya Pawiwahan (Pernikahan) Putra dan Putri kami"
          }
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"detailsPengantin"}
          data-plasmic-override={overrides.detailsPengantin}
          hasGap={true}
          className={classNames(projectcss.all, sty.detailsPengantin)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__ezadk)}
          >
            <h5
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              className={classNames(projectcss.all, projectcss.h5, sty.title2)}
            >
              <GraphCMSField
                className={classNames(
                  "__wab_instance",
                  sty.graphCmsField__lDkl3
                )}
                path={["pengantinPria"]}
              />
            </h5>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__dyWe7)}>
                <h5
                  data-plasmic-name={"title4"}
                  data-plasmic-override={overrides.title4}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    sty.title4
                  )}
                >
                  <GraphCMSField
                    className={classNames(
                      "__wab_instance",
                      sty.graphCmsField__pPhdN
                    )}
                    path={["bapakPria"]}
                  />
                </h5>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hGfZc
                  )}
                >
                  {"&"}
                </div>

                <h5
                  data-plasmic-name={"title8"}
                  data-plasmic-override={overrides.title8}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    sty.title8
                  )}
                >
                  <GraphCMSField
                    className={classNames(
                      "__wab_instance",
                      sty.graphCmsField__nm3Qx
                    )}
                    path={["ibuPria"]}
                  />
                </h5>
              </div>
            ) : null}

            <p
              data-plasmic-name={"title5"}
              data-plasmic-override={overrides.title5}
              className={classNames(projectcss.all, projectcss.p, sty.title5)}
            >
              <GraphCMSField
                className={classNames(
                  "__wab_instance",
                  sty.graphCmsField__wcKu2
                )}
                path={["alamatWanita"]}
              />
            </p>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__e5NJn)}
          >
            <h5
              data-plasmic-name={"title3"}
              data-plasmic-override={overrides.title3}
              className={classNames(projectcss.all, projectcss.h5, sty.title3)}
            >
              <GraphCMSField
                className={classNames("__wab_instance", sty.graphCmsField__jAz)}
                path={["pengantinWanita"]}
              />
            </h5>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__skthq)}>
                <h5
                  data-plasmic-name={"title6"}
                  data-plasmic-override={overrides.title6}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    sty.title6
                  )}
                >
                  <GraphCMSField
                    className={classNames(
                      "__wab_instance",
                      sty.graphCmsField___7PL8H
                    )}
                    path={["bapakWanita"]}
                  />
                </h5>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__siBzn
                  )}
                >
                  {"&"}
                </div>

                <h5
                  data-plasmic-name={"title9"}
                  data-plasmic-override={overrides.title9}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    sty.title9
                  )}
                >
                  <GraphCMSField
                    className={classNames(
                      "__wab_instance",
                      sty.graphCmsField___2Lw9F
                    )}
                    path={["ibuWanita"]}
                  />
                </h5>
              </div>
            ) : null}

            <p
              data-plasmic-name={"title7"}
              data-plasmic-override={overrides.title7}
              className={classNames(projectcss.all, projectcss.p, sty.title7)}
            >
              <GraphCMSField
                className={classNames(
                  "__wab_instance",
                  sty.graphCmsField__rbIk5
                )}
                path={["alamatWanita"]}
              />
            </p>
          </p.Stack>
        </p.Stack>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aikvM
          )}
        >
          {
            "Merupakan suatu kehormatan dan kebahagiaan bagi kami, apabila Bapak / Ibu / Saudara / i berkenan hadir untuk memberikan doa restu, pada:"
          }
        </div>

        <div
          data-plasmic-name={"row"}
          data-plasmic-override={overrides.row}
          className={classNames(projectcss.all, sty.row)}
        >
          <div
            data-plasmic-name={"date2"}
            data-plasmic-override={overrides.date2}
            className={classNames(projectcss.all, sty.date2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__y1Ixu
              )}
            >
              {"Hari/tanggal :"}
            </div>

            <GraphCMSField
              className={classNames("__wab_instance", sty.graphCmsField__i9NOx)}
              path={["evenDateTime"]}
            />
          </div>

          <div
            data-plasmic-name={"pukul"}
            data-plasmic-override={overrides.pukul}
            className={classNames(projectcss.all, sty.pukul)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3LNiM
              )}
            >
              {"Pukul :"}
            </div>

            <GraphCMSField
              className={classNames("__wab_instance", sty.graphCmsField__cKhyf)}
              path={["evenDateTime"]}
            />
          </div>

          <div
            data-plasmic-name={"alamat"}
            data-plasmic-override={overrides.alamat}
            className={classNames(projectcss.all, sty.alamat)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8Ot1X
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Alamat : "
                : "Alamat : "}
            </div>

            <GraphCMSField
              className={classNames("__wab_instance", sty.graphCmsField__dnUjr)}
              path={["eventLocation"]}
            />
          </div>
        </div>

        <div
          data-plasmic-name={"outro"}
          data-plasmic-override={overrides.outro}
          className={classNames(projectcss.all, sty.outro)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__g7N7
            )}
          >
            {
              "Atas Kehadiran serta doa dan restu Bapak / Ibu / Saudara / i, kami ucapkan terima kasih"
            }
          </div>

          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            {"Om Shanti Shanti Shanti Om"}
          </h3>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "img",
    "contentWrapper",
    "h4",
    "title",
    "span",
    "date",
    "content",
    "h1",
    "detailsPengantin",
    "title2",
    "title4",
    "title8",
    "title5",
    "title3",
    "title6",
    "title9",
    "title7",
    "row",
    "date2",
    "pukul",
    "alamat",
    "outro",
    "h3"
  ],
  hero: ["hero", "img", "contentWrapper", "h4", "title", "span", "date"],
  img: ["img"],
  contentWrapper: ["contentWrapper", "h4", "title", "span", "date"],
  h4: ["h4"],
  title: ["title"],
  span: ["span"],
  date: ["date"],
  content: [
    "content",
    "h1",
    "detailsPengantin",
    "title2",
    "title4",
    "title8",
    "title5",
    "title3",
    "title6",
    "title9",
    "title7",
    "row",
    "date2",
    "pukul",
    "alamat",
    "outro",
    "h3"
  ],
  h1: ["h1"],
  detailsPengantin: [
    "detailsPengantin",
    "title2",
    "title4",
    "title8",
    "title5",
    "title3",
    "title6",
    "title9",
    "title7"
  ],
  title2: ["title2"],
  title4: ["title4"],
  title8: ["title8"],
  title5: ["title5"],
  title3: ["title3"],
  title6: ["title6"],
  title9: ["title9"],
  title7: ["title7"],
  row: ["row", "date2", "pukul", "alamat"],
  date2: ["date2"],
  pukul: ["pukul"],
  alamat: ["alamat"],
  outro: ["outro", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "header";
  img: typeof p.PlasmicImg;
  contentWrapper: "div";
  h4: "h4";
  title: "h1";
  span: "span";
  date: "h4";
  content: "div";
  h1: "h1";
  detailsPengantin: "div";
  title2: "h5";
  title4: "h5";
  title8: "h5";
  title5: "p";
  title3: "h5";
  title6: "h5";
  title9: "h5";
  title7: "p";
  row: "div";
  date2: "div";
  pukul: "div";
  alamat: "div";
  outro: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageTemplate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageTemplate__VariantsArgs;
    args?: PlasmicPageTemplate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageTemplate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPageTemplate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPageTemplate__ArgProps,
          internalVariantPropNames: PlasmicPageTemplate__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPageTemplate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageTemplate";
  } else {
    func.displayName = `PlasmicPageTemplate.${nodeName}`;
  }
  return func;
}

export const PlasmicPageTemplate = Object.assign(
  // Top-level PlasmicPageTemplate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    img: makeNodeComponent("img"),
    contentWrapper: makeNodeComponent("contentWrapper"),
    h4: makeNodeComponent("h4"),
    title: makeNodeComponent("title"),
    span: makeNodeComponent("span"),
    date: makeNodeComponent("date"),
    content: makeNodeComponent("content"),
    h1: makeNodeComponent("h1"),
    detailsPengantin: makeNodeComponent("detailsPengantin"),
    title2: makeNodeComponent("title2"),
    title4: makeNodeComponent("title4"),
    title8: makeNodeComponent("title8"),
    title5: makeNodeComponent("title5"),
    title3: makeNodeComponent("title3"),
    title6: makeNodeComponent("title6"),
    title9: makeNodeComponent("title9"),
    title7: makeNodeComponent("title7"),
    row: makeNodeComponent("row"),
    date2: makeNodeComponent("date2"),
    pukul: makeNodeComponent("pukul"),
    alamat: makeNodeComponent("alamat"),
    outro: makeNodeComponent("outro"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicPageTemplate
    internalVariantProps: PlasmicPageTemplate__VariantProps,
    internalArgProps: PlasmicPageTemplate__ArgProps
  }
);

export default PlasmicPageTemplate;
/* prettier-ignore-end */
