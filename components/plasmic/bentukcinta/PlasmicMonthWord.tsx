// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sqsUtdEY9EziH5JCt3D7uY
// Component: ccyNqBOp-s
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: sqsUtdEY9EziH5JCt3D7uY/projectcss
import sty from "./PlasmicMonthWord.module.css"; // plasmic-import: ccyNqBOp-s/css

export type PlasmicMonthWord__VariantMembers = {
  montName:
    | "bulan1"
    | "bulan2"
    | "bulan3"
    | "bulan4"
    | "bulan5"
    | "bulan6"
    | "bulan7"
    | "bulan8"
    | "bulan9"
    | "bulan10"
    | "bulan11"
    | "bulan12";
};

export type PlasmicMonthWord__VariantsArgs = {
  montName?: SingleChoiceArg<
    | "bulan1"
    | "bulan2"
    | "bulan3"
    | "bulan4"
    | "bulan5"
    | "bulan6"
    | "bulan7"
    | "bulan8"
    | "bulan9"
    | "bulan10"
    | "bulan11"
    | "bulan12"
  >;
};

type VariantPropType = keyof PlasmicMonthWord__VariantsArgs;
export const PlasmicMonthWord__VariantProps = new Array<VariantPropType>(
  "montName"
);

export type PlasmicMonthWord__ArgsType = {};
type ArgPropType = keyof PlasmicMonthWord__ArgsType;
export const PlasmicMonthWord__ArgProps = new Array<ArgPropType>();

export type PlasmicMonthWord__OverridesType = {
  root?: p.Flex<"h4">;
};

export interface DefaultMonthWordProps {
  montName?: SingleChoiceArg<
    | "bulan1"
    | "bulan2"
    | "bulan3"
    | "bulan4"
    | "bulan5"
    | "bulan6"
    | "bulan7"
    | "bulan8"
    | "bulan9"
    | "bulan10"
    | "bulan11"
    | "bulan12"
  >;
  className?: string;
}

function PlasmicMonthWord__RenderFunc(props: {
  variants: PlasmicMonthWord__VariantsArgs;
  args: PlasmicMonthWord__ArgsType;
  overrides: PlasmicMonthWord__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <h4
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.h4,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootmontName_bulan10]: hasVariant(
            variants,
            "montName",
            "bulan10"
          ),
          [sty.rootmontName_bulan11]: hasVariant(
            variants,
            "montName",
            "bulan11"
          ),
          [sty.rootmontName_bulan12]: hasVariant(
            variants,
            "montName",
            "bulan12"
          ),
          [sty.rootmontName_bulan1]: hasVariant(variants, "montName", "bulan1"),
          [sty.rootmontName_bulan2]: hasVariant(variants, "montName", "bulan2"),
          [sty.rootmontName_bulan3]: hasVariant(variants, "montName", "bulan3"),
          [sty.rootmontName_bulan4]: hasVariant(variants, "montName", "bulan4"),
          [sty.rootmontName_bulan5]: hasVariant(variants, "montName", "bulan5"),
          [sty.rootmontName_bulan6]: hasVariant(variants, "montName", "bulan6"),
          [sty.rootmontName_bulan7]: hasVariant(variants, "montName", "bulan7"),
          [sty.rootmontName_bulan8]: hasVariant(variants, "montName", "bulan8"),
          [sty.rootmontName_bulan9]: hasVariant(variants, "montName", "bulan9")
        }
      )}
    >
      {hasVariant(variants, "montName", "bulan9")
        ? "Sep"
        : hasVariant(variants, "montName", "bulan8")
        ? "Aug"
        : hasVariant(variants, "montName", "bulan7")
        ? "Jul"
        : hasVariant(variants, "montName", "bulan6")
        ? "Jun"
        : hasVariant(variants, "montName", "bulan5")
        ? "May"
        : hasVariant(variants, "montName", "bulan4")
        ? "Apr"
        : hasVariant(variants, "montName", "bulan3")
        ? "Mar"
        : hasVariant(variants, "montName", "bulan2")
        ? "Feb"
        : hasVariant(variants, "montName", "bulan12")
        ? "Des"
        : hasVariant(variants, "montName", "bulan11")
        ? "Nov"
        : hasVariant(variants, "montName", "bulan10")
        ? "Oct"
        : hasVariant(variants, "montName", "bulan1")
        ? "Jan"
        : "Month"}
    </h4>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMonthWord__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMonthWord__VariantsArgs;
    args?: PlasmicMonthWord__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMonthWord__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMonthWord__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMonthWord__ArgProps,
          internalVariantPropNames: PlasmicMonthWord__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicMonthWord__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMonthWord";
  } else {
    func.displayName = `PlasmicMonthWord.${nodeName}`;
  }
  return func;
}

export const PlasmicMonthWord = Object.assign(
  // Top-level PlasmicMonthWord renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicMonthWord
    internalVariantProps: PlasmicMonthWord__VariantProps,
    internalArgProps: PlasmicMonthWord__ArgProps
  }
);

export default PlasmicMonthWord;
/* prettier-ignore-end */
