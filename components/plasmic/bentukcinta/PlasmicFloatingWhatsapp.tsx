// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sqsUtdEY9EziH5JCt3D7uY
// Component: -6rOvsYjub
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: sqsUtdEY9EziH5JCt3D7uY/projectcss
import sty from "./PlasmicFloatingWhatsapp.module.css"; // plasmic-import: -6rOvsYjub/css

import WhatsappIconsvgIcon from "./icons/PlasmicIcon__WhatsappIconsvg"; // plasmic-import: X7pYoTjLr7/icon

export type PlasmicFloatingWhatsapp__VariantMembers = {};

export type PlasmicFloatingWhatsapp__VariantsArgs = {};
type VariantPropType = keyof PlasmicFloatingWhatsapp__VariantsArgs;
export const PlasmicFloatingWhatsapp__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFloatingWhatsapp__ArgsType = {
  whatsappLink?: string;
};

type ArgPropType = keyof PlasmicFloatingWhatsapp__ArgsType;
export const PlasmicFloatingWhatsapp__ArgProps = new Array<ArgPropType>(
  "whatsappLink"
);

export type PlasmicFloatingWhatsapp__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
};

export interface DefaultFloatingWhatsappProps {
  whatsappLink?: string;
  className?: string;
}

function PlasmicFloatingWhatsapp__RenderFunc(props: {
  variants: PlasmicFloatingWhatsapp__VariantsArgs;
  args: PlasmicFloatingWhatsapp__ArgsType;
  overrides: PlasmicFloatingWhatsapp__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link)}
        component={Link}
        href={args.whatsappLink}
        platform={"nextjs"}
      >
        <WhatsappIconsvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </p.PlasmicLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "svg"],
  link: ["link", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFloatingWhatsapp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFloatingWhatsapp__VariantsArgs;
    args?: PlasmicFloatingWhatsapp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFloatingWhatsapp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFloatingWhatsapp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFloatingWhatsapp__ArgProps,
          internalVariantPropNames: PlasmicFloatingWhatsapp__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFloatingWhatsapp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFloatingWhatsapp";
  } else {
    func.displayName = `PlasmicFloatingWhatsapp.${nodeName}`;
  }
  return func;
}

export const PlasmicFloatingWhatsapp = Object.assign(
  // Top-level PlasmicFloatingWhatsapp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicFloatingWhatsapp
    internalVariantProps: PlasmicFloatingWhatsapp__VariantProps,
    internalArgProps: PlasmicFloatingWhatsapp__ArgProps
  }
);

export default PlasmicFloatingWhatsapp;
/* prettier-ignore-end */
